{"version":3,"sources":["webpack://yocto-console-view/webpack/universalModuleDefinition","webpack://yocto-console-view/webpack/bootstrap","webpack://yocto-console-view/./src/module/main.module.js","webpack://yocto-console-view/external \"angular-animate\"","webpack://yocto-console-view/external \"@uirouter/angularjs\"","webpack://yocto-console-view/external \"guanlecoja-ui\"","webpack://yocto-console-view/external \"buildbot-data-js\"","webpack://yocto-console-view/./src/module/console.tpl.jade","webpack://yocto-console-view/./src/module/view/modal/modal.tpl.jade","webpack://yocto-console-view/./src/module/view/modal/modal.controller.js","webpack://yocto-console-view/./src/module/releaseselectorfield.directive.js","webpack://yocto-console-view/./src/module/releaseselectorfield.tpl.jade","webpack://yocto-console-view/./src/module/yoctochangedetails.directive.js","webpack://yocto-console-view/./src/module/yoctochangedetails.tpl.jade"],"names":["root","factory","exports","module","require","define","amd","self","this","__WEBPACK_EXTERNAL_MODULE__1__","__WEBPACK_EXTERNAL_MODULE__2__","__WEBPACK_EXTERNAL_MODULE__3__","__WEBPACK_EXTERNAL_MODULE__4__","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","angular","config","ConsoleState","constructor","$stateProvider","glMenuServiceProvider","bbSettingsServiceProvider","addGroup","caption","icon","order","cfg","group","state","controller","controllerAs","template","url","data","addSettingsGroup","items","type","default_value","Console","$scope","$q","$window","dataService","bbSettingsService","resultsService","$uibModal","$timeout","onChange","_onChange","matchBuildWithChange","makeFakeChange","extend","settings","getSettingsGroup","buildLimit","changeLimit","dataAccessor","open","closeOnDestroy","_infoIsExpanded","all_builders","getBuilders","builders","Intl","collator","Collator","undefined","numeric","sensitivity","strcompare","compare","a","b","revmapping","branchmapping","builds","getBuilds","limit","changes","getChanges","buildrequests","getBuildrequests","buildsets","getBuildsets","onNew","build","change","buildid","properties","yp_build_revision","yp_build_branch","complete_at","getProperties","endpoint","split","rev","getBuildProperty","branch","onchange_debounce","console","log","length","$resolved","Array","from","builderid","hasBuild","sortBuildersByTags","changesBySSID","changesByRevision","sourcestamp","ssid","revision","populateChange","filtered_changes","comments","subject","push","builders_with_builds","builderids_with_builds","builder","last_builderids_with_builds","tag_line","_sortBuildersByTags","tag_lines","sorted_builders","set_tag_line","depth","tag","colspan","_tag_line","last_tag","walk_tree","map","_tag","sort","concat","builders_by_tags","tags","chosen_builderids","excluded","remaining_builders","buildersById","buildrequest","buildrequestid","buildset","buildsetid","sourcestamps","started_at","revlink","errorlink","bid","parent_buildid","loglink","reason","publish_destination","publishurl","replace","indexOf","when_timestamp","changeid","openAll","show_details","closeAll","getRowHeaderWidth","hasExpanded","getColHeaderHeight","max_buildername","Math","max","isBigTable","padding","innerWidth","infoIsExpanded","selectBuild","windowClass","resolve","selectedBuild","toggleInfo","window","T","ConsoleModal","$uibModalInstance","$on","close","directive","Releaseselectorfield","restrict","scope","_releaseselectorfield","$http","rootfield","$parent","fields_ref","gatherFields","fields","field","fullName","$watch","selector","selectors","result","k","v","Yoctochangedetails","compact"],"mappings":"CAAA,SAA2CA,EAAMC,GAC1B,iBAAZC,SAA0C,iBAAXC,OACxCA,OAAOD,QAAUD,EAAQG,QAAQ,mBAAoBA,QAAQ,uBAAwBA,QAAQ,iBAAkBA,QAAQ,qBAC9F,mBAAXC,QAAyBA,OAAOC,IAC9CD,OAAO,qBAAsB,CAAC,kBAAmB,sBAAuB,gBAAiB,oBAAqBJ,GACpF,iBAAZC,QACdA,QAAQ,sBAAwBD,EAAQG,QAAQ,mBAAoBA,QAAQ,uBAAwBA,QAAQ,iBAAkBA,QAAQ,qBAEtIJ,EAAK,sBAAwBC,EAAQD,EAAK,mBAAoBA,EAAK,uBAAwBA,EAAK,iBAAkBA,EAAK,qBARzH,CASoB,oBAATO,KAAuBA,KAAOC,MAAO,SAASC,EAAgCC,EAAgCC,EAAgCC,GACzJ,O,YCTE,IAAIC,EAAmB,GAGvB,SAASC,EAAoBC,GAG5B,GAAGF,EAAiBE,GACnB,OAAOF,EAAiBE,GAAUb,QAGnC,IAAIC,EAASU,EAAiBE,GAAY,CACzCC,EAAGD,EACHE,GAAG,EACHf,QAAS,IAUV,OANAgB,EAAQH,GAAUI,KAAKhB,EAAOD,QAASC,EAAQA,EAAOD,QAASY,GAG/DX,EAAOc,GAAI,EAGJd,EAAOD,QA0Df,OArDAY,EAAoBM,EAAIF,EAGxBJ,EAAoBO,EAAIR,EAGxBC,EAAoBQ,EAAI,SAASpB,EAASqB,EAAMC,GAC3CV,EAAoBW,EAAEvB,EAASqB,IAClCG,OAAOC,eAAezB,EAASqB,EAAM,CAAEK,YAAY,EAAMC,IAAKL,KAKhEV,EAAoBgB,EAAI,SAAS5B,GACX,oBAAX6B,QAA0BA,OAAOC,aAC1CN,OAAOC,eAAezB,EAAS6B,OAAOC,YAAa,CAAEC,MAAO,WAE7DP,OAAOC,eAAezB,EAAS,aAAc,CAAE+B,OAAO,KAQvDnB,EAAoBoB,EAAI,SAASD,EAAOE,GAEvC,GADU,EAAPA,IAAUF,EAAQnB,EAAoBmB,IAC/B,EAAPE,EAAU,OAAOF,EACpB,GAAW,EAAPE,GAA8B,iBAAVF,GAAsBA,GAASA,EAAMG,WAAY,OAAOH,EAChF,IAAII,EAAKX,OAAOY,OAAO,MAGvB,GAFAxB,EAAoBgB,EAAEO,GACtBX,OAAOC,eAAeU,EAAI,UAAW,CAAET,YAAY,EAAMK,MAAOA,IACtD,EAAPE,GAA4B,iBAATF,EAAmB,IAAI,IAAIM,KAAON,EAAOnB,EAAoBQ,EAAEe,EAAIE,EAAK,SAASA,GAAO,OAAON,EAAMM,IAAQC,KAAK,KAAMD,IAC9I,OAAOF,GAIRvB,EAAoB2B,EAAI,SAAStC,GAChC,IAAIqB,EAASrB,GAAUA,EAAOiC,WAC7B,WAAwB,OAAOjC,EAAgB,SAC/C,WAA8B,OAAOA,GAEtC,OADAW,EAAoBQ,EAAEE,EAAQ,IAAKA,GAC5BA,GAIRV,EAAoBW,EAAI,SAASiB,EAAQC,GAAY,OAAOjB,OAAOkB,UAAUC,eAAe1B,KAAKuB,EAAQC,IAGzG7B,EAAoBgC,EAAI,GAIjBhC,EAAoBA,EAAoBiC,EAAI,G,+BClFrD,2BAujBAC,QAAQ7C,OAAO,qBAAsB,CACjC,YAAa,eAAgB,YAAa,gBAAiB,WAC9D8C,OAAO,CAAC,iBAAkB,wBAAyB,4BA3iBpD,MAAMC,aACFC,YAAYC,EAAgBC,EAAuBC,GAG/C,IAAM/B,EAAO,UAGb8B,EAAsBE,SAAS,CAC3BhC,OACAiC,QAAS,qBACTC,KAAM,qBACNC,MAAO,IAIX,IAAMC,EAAM,CACRC,MAAOrC,EACPiC,QAAS,sBAIPK,EAAQ,CACVC,WAAY,GAAF,OAAKvC,EAAL,cACVwC,aAAc,IACdC,SAAU5D,EAAQ,GAClBmB,OACA0C,IAAK,IAAF,OAAM1C,GACT2C,KAAMP,GAGVP,EAAeS,MAAMA,GAErBP,EAA0Ba,iBAAiB,CACvC5C,KAAM,UACNiC,QAAS,2BACTY,MAAO,CAAC,CACJC,KAAM,UACN9C,KAAM,aACNiC,QAAS,4BACTc,cAAe,KAEjB,CACED,KAAM,UACN9C,KAAM,cACNiC,QAAS,6BACTc,cAAe,WA+f9BR,WAAW,oBAAqB,CAAC,SAAU,KAAM,UAAW,cAAe,oBAAqB,iBAAkB,YAAa,WAzfhI,MAAMS,QACFpB,YAAYqB,EAAQC,EAAIC,EAASC,EAAaC,EAAmBC,EAC7DC,EAAWC,GACXvE,KAAKwE,SAAWxE,KAAKwE,SAASxC,KAAKhC,MACnCA,KAAKyE,UAAYzE,KAAKyE,UAAUzC,KAAKhC,MACrCA,KAAK0E,qBAAuB1E,KAAK0E,qBAAqB1C,KAAKhC,MAC3DA,KAAK2E,eAAiB3E,KAAK2E,eAAe3C,KAAKhC,MAC/CA,KAAKgE,OAASA,EACdhE,KAAKkE,QAAUA,EACflE,KAAKsE,UAAYA,EACjBtE,KAAKuE,SAAWA,EAChB/B,QAAQoC,OAAO5E,KAAMqE,GACrB,IAAMQ,EAAWT,EAAkBU,iBAAiB,WAOpD,GANA9E,KAAK+E,WAAaF,EAASE,WAAWtD,MACtCzB,KAAKgF,YAAcH,EAASG,YAAYvD,MACxCzB,KAAKiF,aAAed,EAAYe,OAAOC,eAAenF,KAAKgE,QAC3DhE,KAAKoF,gBAAkB,GACvBpF,KAAKgE,OAAOqB,aAAgBrF,KAAKqF,aAAerF,KAAKiF,aAAaK,cAClEtF,KAAKgE,OAAOuB,SAAYvF,KAAKuF,SAAW,GACpB,oBAATC,MAAiC,OAATA,KAAe,CAC9C,IAAMC,EAAW,IAAID,KAAKE,cAASC,EAAW,CAACC,SAAS,EAAMC,YAAa,SAC3E7F,KAAK8F,WAAaL,EAASM,aAE3B/F,KAAK8F,WAAa,SAASE,EAAGC,GAC1B,OAAID,EAAIC,GACI,EAERD,IAAMC,EACC,EAEJ,GAIfjG,KAAKgE,OAAOkC,WAAclG,KAAKkG,WAAa,GAC5ClG,KAAKgE,OAAOmC,cAAiBnG,KAAKmG,cAAgB,GAElDnG,KAAKgE,OAAOoC,OAAUpG,KAAKoG,OAASpG,KAAKiF,aAAaoB,UAAU,CAC5DlE,SAAU,CAAC,oBAAqB,kBAAmB,SAAU,uBAC7DmE,MAAOtG,KAAK+E,WACZ7B,MAAO,gBAEXlD,KAAKuG,QAAUvG,KAAKiF,aAAauB,WAAW,CAACF,MAAOtG,KAAKgF,YAAa9B,MAAO,cAC7ElD,KAAKyG,cAAgBzG,KAAKiF,aAAayB,iBAAiB,CAACJ,MAAOtG,KAAK+E,WAAY7B,MAAO,kBACxFlD,KAAK2G,UAAY3G,KAAKiF,aAAa2B,aAAa,CAACN,MAAOtG,KAAK+E,WAAY7B,MAAO,kBAEhFlD,KAAKoG,OAAO5B,SAAWxE,KAAKwE,SAC5BxE,KAAKuG,QAAQ/B,SAAWxE,KAAKwE,SAC7BxE,KAAKyG,cAAcjC,SAAWxE,KAAKwE,SACnCxE,KAAK2G,UAAUnC,SAAWxE,KAAKwE,SAE/BxE,KAAKoG,OAAOS,MAAQC,IAChB,IAAIC,GAAS,EAETC,EACAF,EADAE,QAE+E,OAA1D,MAApBF,EAAMG,WAAqBH,EAAMG,WAAWC,uBAAoBvB,KACjE3F,KAAKkG,WAAWY,EAAME,SAAWF,EAAMG,WAAWC,kBAAkB,GACpEH,GAAS,GAEoE,OAAxD,MAApBD,EAAMG,WAAqBH,EAAMG,WAAWE,qBAAkBxB,KAC/D3F,KAAKmG,cAAcW,EAAME,SAAWF,EAAMG,WAAWE,gBAAgB,GACrEJ,GAAS,GAEP/G,KAAKkG,WAAWc,IAAahH,KAAKmG,cAAca,IAAcF,EAAMM,cACtEN,EAAMO,gBAAgB7C,SAAWyC,IAG7B,GAFAF,GAAS,EACTC,EAAUC,EAAWK,SAASC,MAAM,KAAK,IACpCvH,KAAKkG,WAAWc,GAAU,CAC3B,IAAMQ,EAAMxH,KAAKyH,iBAAiBR,EAAW,GAAI,qBACtC,MAAPO,IACAxH,KAAKkG,WAAWc,GAAWQ,EAC3BT,GAAS,GAGjB,IAAK/G,KAAKmG,cAAca,GAAU,CAC9B,IAAMU,EAAS1H,KAAKyH,iBAAiBR,EAAW,GAAI,mBACtC,MAAVS,IACA1H,KAAKmG,cAAca,GAAWU,EAC9BX,GAAS,GAGbA,GAAqC,MAA1B/G,KAAK2H,oBAChBC,QAAQC,IAAI,sBACZ7H,KAAK2H,kBAAoB3H,KAAKuE,SAASvE,KAAKyE,UAAW,QAI/DsC,GAAqC,MAA1B/G,KAAK2H,oBAChBC,QAAQC,IAAI,gBACZ7H,KAAK2H,kBAAoB3H,KAAKuE,SAASvE,KAAKyE,UAAW,OAKnEgD,iBAAiBR,EAAY9E,GAEzB,OADoB8E,GAAcA,EAAW5E,eAAeF,GAClC8E,EAAW9E,GAAU,GAAoB,KAGvEqC,SAASjC,GAEuB,IAAvBvC,KAAKoG,OAAO0B,QAA+C,IAA7B9H,KAAKqF,aAAayC,QAAkB9H,KAAKuG,QAAQwB,WACjD,IAA1B/H,KAAK2G,UAAUmB,QAAyC,IAAvB9H,KAAKyG,eAGhB,MAA1BzG,KAAK2H,oBACN3H,KAAK2H,kBAAoB3H,KAAKuE,SAASvE,KAAKyE,UAAW,MAI/DA,YAEI,IAAIqC,EAAOC,EADXa,QAAQC,IAAI,mBAEZ7H,KAAK2H,uBAAoBhC,EAEzB,cAAcqC,MAAMC,KAAKjI,KAAKoG,QAA9B,eAAKU,EAAkC,KACnC9G,KAAKqF,aAAahE,IAAIyF,EAAMoB,WAAWC,UAAW,EAGtDnI,KAAKoI,mBAAmBpI,KAAKqF,cAE7BrF,KAAKqI,cAAgB,GACrBrI,KAAKsI,kBAAoB,GACzB,cAAeN,MAAMC,KAAKjI,KAAKuG,SAA/B,eAAKQ,EAAoC,KACrC/G,KAAKqI,cAActB,EAAOwB,YAAYC,MAAQzB,EAC9C/G,KAAKsI,kBAAkBvB,EAAO0B,UAAY1B,EAC1C/G,KAAK0I,eAAe3B,GAIxB,cAAciB,MAAMC,KAAKjI,KAAKoG,QAA9B,eAAKU,EAAkC,KACnC9G,KAAK0E,qBAAqBoC,GAK9B,IAAK,IAAI0B,KAFTxI,KAAK2I,iBAAmB,GAEP3I,KAAKqI,cAAe,EACjCtB,EAAS/G,KAAKqI,cAAcG,IACjBI,WACP7B,EAAO8B,QAAU9B,EAAO6B,SAASrB,MAAM,MAAM,IAEjD,cAAoBS,MAAMC,KAAKlB,EAAOxB,UAAtC,eAAiD,CAC7C,GADY,KACAa,OAAO0B,OAAS,EAAG,CAC3B9H,KAAK2I,iBAAiBG,KAAK/B,GAC3B,SAahBqB,mBAAmB/C,GAKf,IAHA,IACM0D,EAAuB,GACzBC,EAAyB,GAC7B,MAAoBhB,MAAMC,KAAK5C,GAA/B,eAA8C,CAAzC,IAAI4D,EAAO,KACRA,EAAQd,WACRY,EAAqBD,KAAKG,GAC1BD,GAA0B,IAAJ,OAAQC,EAAQf,YAI9C,GAAIc,IAA2BhJ,KAAKkJ,4BAApC,CAmDA,IA9CA,IAAIC,EAAWnJ,KAAKoJ,oBAAoBL,GAOlCM,EAAY,GAEdC,EAAkB,GAChBC,EAAe,SAASC,EAAOC,EAAKC,GAEtC,IAAIC,EAAYN,EAAUG,GAC1B,GAAkB,MAAbG,EAEDA,EAAaN,EAAUG,GAAS,OAC7B,CAGH,IAAMI,EAAWD,EAAUA,EAAU7B,OAAS,GAC9C,GAAI8B,EAASH,MAAQA,EAEjB,YADAG,EAASF,SAAWA,GAI5B,OAAOC,EAAUb,KAAK,CAACW,MAAKC,aAE1B3J,EAAOC,KAET6J,EAAY,SAAZA,EAAqBJ,EAAKD,GAE1B,GADAD,EAAaC,EAAOC,EAAIA,IAAKA,EAAIlE,SAASuC,QACrB,MAAhB2B,EAAIN,UAA8C,IAAxBM,EAAIN,SAASrB,OAW5C,OAAOE,MAAMC,KAAKwB,EAAIN,UAAUW,IAAKC,GACjCF,EAAUE,EAAMP,EAAQ,IATxBC,EAAIlE,SAASyE,KAAK,CAAChE,EAAGC,IAAMlG,EAAK+F,WAAWE,EAAEjF,KAAMkF,EAAElF,OACtDuI,EAAkBA,EAAgBW,OAAOR,EAAIlE,UAC7C,IAAK,IAAI/E,EAAI,EAAGA,GAAK,IAAKA,IAEtB+I,EAAaC,EAAQhJ,EAAG,GAAIiJ,EAAIlE,SAASuC,SAQrD,MAAYE,MAAMC,KAAKkB,GAAvB,eACIU,EAD8B,KACf,GAGnB7J,KAAKuF,SAAW+D,EAChBtJ,KAAKqJ,UAAY,GAEjB,cAAiBrB,MAAMC,KAAKoB,GAA5B,eAC+B,KAD1BF,EAAmC,MACpBrB,QAAsC,KAApBqB,EAAS,GAAGM,KAC1CzJ,KAAKqJ,UAAUP,KAAKK,GAG5B,OAAOnJ,KAAKkJ,4BAA8BF,GAM9CI,oBAAoB/D,GAKhB,IAFA,IAAI4D,EAAS1D,EAAUkE,EACjBS,EAAmB,GACzB,MAAgBlC,MAAMC,KAAK5C,GAA3B,eACI,GAAoB,OADnB4D,EAAqC,MAC1BkB,KACR,cAAYnC,MAAMC,KAAKgB,EAAQkB,MAA/B,eACkC,MAAzBD,EADJT,EAAiC,QAE9BS,EAAiBT,GAAO,IAE5BS,EAAiBT,GAAKX,KAAKG,GAIvC,IAAMkB,EAAO,GACb,IAAKV,KAAOS,GAER3E,EAAW2E,EAAiBT,IACf3B,OAASzC,EAAayC,QAC/BqC,EAAKrB,KAAK,CAACW,MAAKlE,aAMxB4E,EAAKH,KAAK,CAAChE,EAAGC,IAAMA,EAAEV,SAASuC,OAAS9B,EAAET,SAASuC,QAKnD,IAHA,IAAMqB,EAAW,GACXiB,EAAoB,GAE1B,MAAYpC,MAAMC,KAAKkC,GAAvB,eAA8B,CAAzBV,EAAyB,KAE1B,IADA,IAAIY,GAAW,EACf,MAAgBrC,MAAMC,KAAKwB,EAAIlE,UAA/B,eACI,GADC0D,EAAqC,KAClCmB,EAAkB/H,eAAe4G,EAAQf,WAAY,CACrDmC,GAAW,EACX,MAGR,IAAKA,EAAU,CACX,cAAgBrC,MAAMC,KAAKwB,EAAIlE,UAA/B,eACI6E,GADCnB,EAAqC,MACZf,WAAauB,EAAIA,IAE/CN,EAASL,KAAKW,IAMtB,IADA,IAAMa,EAAqB,GAC3B,MAAgBtC,MAAMC,KAAK5C,GAA3B,eAAK4D,EAAqC,KACjCmB,EAAkB/H,eAAe4G,EAAQf,YAC1CoC,EAAmBxB,KAAKG,GAShC,GALIqB,EAAmBxC,QACnBqB,EAASL,KAAK,CAACW,IAAK,GAAIlE,SAAU+E,IAIlCnB,EAASrB,OAAS,EAClB,cAAYE,MAAMC,KAAKkB,GAAvB,gBAAKM,EAA6B,MAC1BN,SAAWnJ,KAAKoJ,oBAAoBK,EAAIlE,UAGpD,OAAO4D,EAMXT,eAAe3B,GACXA,EAAOxB,SAAW,GAClBwB,EAAOwD,aAAe,GACtB,cAAoBvC,MAAMC,KAAKjI,KAAKuF,UAApC,eAA+C,CAA1C,IAAI0D,EAAO,KACZA,EAAU,CAACf,UAAWe,EAAQf,UAAWnH,KAAMkI,EAAQlI,KAAMqF,OAAQ,IACrEW,EAAOxB,SAASuD,KAAKG,GACrBlC,EAAOwD,aAAatB,EAAQf,WAAae,GAMjDvE,qBAAqBoC,GACjB,IAAIC,EAAgBS,EACdgD,EAAexK,KAAKyG,cAAcpF,IAAIyF,EAAM2D,gBAClD,GAAqB,MAAhBD,EAAL,CAGA,IAAME,EAAW1K,KAAK2G,UAAUtF,IAAImJ,EAAaG,YACjD,GAAiB,MAAZD,EAAL,CAGA,GAAkB,MAAZA,GAA+C,MAAzBA,EAASE,aACjC,cAAwB5C,MAAMC,KAAKyC,EAASE,cAA5C,eAA2D,CAAtD,IAAIrC,EAAW,KAEhB,GAAc,OADdxB,EAAS/G,KAAKqI,cAAcE,EAAYC,OAEpC,MAKZ,GAAoF,OAA1D,MAApB1B,EAAMG,WAAqBH,EAAMG,WAAWC,uBAAoBvB,IAAuB3F,KAAKkG,WAAWY,EAAME,SAAU,CAErHQ,EAD+E,OAA1D,MAApBV,EAAMG,WAAqBH,EAAMG,WAAWC,uBAAoBvB,GAC3DmB,EAAMG,WAAWC,kBAAkB,GAEnClH,KAAKkG,WAAWY,EAAME,SAGjB,OADfD,EAAS/G,KAAKsI,kBAAkBd,MAE5BT,EAAS/G,KAAKqI,cAAcb,IAEjB,MAAVT,IACDA,EAAS/G,KAAK2E,eAAe6C,EAAKV,EAAM+D,WAAYrD,IAGxDT,EAAO/D,QAAU,SACgE,OAAxD,MAApB8D,EAAMG,WAAqBH,EAAMG,WAAWE,qBAAkBxB,KAC/DoB,EAAO/D,QAAU8D,EAAMG,WAAWE,gBAAgB,IAElDnH,KAAKmG,cAAcW,EAAME,WACzBD,EAAO/D,QAAUhD,KAAKmG,cAAcW,EAAME,UAE9CD,EAAO+D,QAAU,wDAA0DtD,EAC3ET,EAAOgE,UAAY,wDAA0DvD,EAAM,yBACnF,IAAIwD,EAAMlE,EAAME,QACC,MAAZ0D,GAAiD,MAA3BA,EAASO,iBAChCD,EAAMN,EAASO,iBAEC,MAAdlE,EAAOiE,KAAiBA,EAAMjE,EAAOiE,KAAwB,MAAdjE,EAAOiE,OACxDjE,EAAOiE,IAAMA,EACbjE,EAAOmE,QAAU,+CAAiDF,GAEE,OAA/C,MAApBlE,EAAMG,WAAqBH,EAAMG,WAAWkE,YAASxF,KACtDoB,EAAOoE,OAASrE,EAAMG,WAAWkE,OAAO,IAEyC,OAA5D,MAApBrE,EAAMG,WAAqBH,EAAMG,WAAWmE,yBAAsBzF,KACnEoB,EAAOsE,WAAavE,EAAMG,WAAWmE,oBAAoB,GAAGE,QAAQ,iDAAkD,uCAG1H9D,EAAM,sBACS,MAAVT,IACDA,EAAS/G,KAAKqI,cAAcb,IAEjB,MAAVT,KACDA,EAAS/G,KAAK2E,eAAe6C,EAAKV,EAAM+D,WAAYrD,IAC7CxE,QAAUwE,IAI0C,GAA/DT,EAAOwD,aAAazD,EAAMoB,WAAW9B,OAAOmF,QAAQzE,IACpDC,EAAOwD,aAAazD,EAAMoB,WAAW9B,OAAO0C,KAAKhC,KAIzDnC,eAAe8D,EAAU+C,EAAgB5C,GACrC,IAAM7B,EAAS,CACX0B,WACAgD,SAAUhD,EACV+C,iBACA5C,YAIJ,OAFA5I,KAAKqI,cAAcI,GAAY1B,EAC/B/G,KAAK0I,eAAe3B,GACbA,EAKX2E,UACI,OAAO1D,MAAMC,KAAKjI,KAAK2I,kBAAkBmB,IAAK/C,GACzCA,EAAO4E,cAAe,GAM/BC,WACI,OAAO5D,MAAMC,KAAKjI,KAAK2I,kBAAkBmB,IAAK/C,GACzCA,EAAO4E,cAAe,GAO/BE,oBACI,OAAI7L,KAAK8L,cACE,IAEA,IAOfC,qBAEI,IADA,IAAIC,EAAkB,EACtB,MAAoBhE,MAAMC,KAAKjI,KAAKuF,UAApC,eAA+C,CAA1C,IAAI0D,EAAO,KACZ+C,EAAkBC,KAAKC,IAAIjD,EAAQlI,KAAK+G,OAAQkE,GAEpD,OAAOC,KAAKC,IAAI,IAAuB,EAAlBF,GASzBG,aACI,IAAMC,EAAUpM,KAAK6L,oBACrB,OAAM7L,KAAKkE,QAAQmI,WAAaD,GAAWpM,KAAKuF,SAASuC,OAAU,GAUvEgE,cACI,cAAmB9D,MAAMC,KAAKjI,KAAKuG,SAAnC,eAA6C,CAAxC,IAAIQ,EAAM,KACX,GAAI/G,KAAKsM,eAAevF,GACpB,OAAO,EAGf,OAAO,EAQXwF,YAAYzF,GAER,OAAe9G,KAAKsE,UAAUY,KAAK,CAC/B1B,SAAU5D,EAAQ,GAClB0D,WAAY,kCACZkJ,YAAa,YACbC,QAAS,CACLC,cAAa,IAAY5F,KAUrC6F,WAAW5F,GACP,OAAOA,EAAO4E,cAAgB5E,EAAO4E,aAEzCW,eAAevF,GACX,OAAOA,EAAO4E,iBAUtB/L,EAAQ,GACRA,EAAQ,GACRA,EAAQ,K,cC9jBRD,EAAOD,QAAUO,G,cCAjBN,EAAOD,QAAUQ,G,cCAjBP,EAAOD,QAAUS,G,cCAjBR,EAAOD,QAAUU,G,cCAjBT,EAAOD,QAAUkN,OAAOC,EAAE,oCAAsC,46D,cCAhElN,EAAOD,QAAUkN,OAAOC,EAAE,kCAAoC,mV,cCoB9DrK,QAAQ7C,OAAO,sBACd2D,WAAW,yBAA0B,CAAC,SAAU,oBAAqB,gBAhBtE,MAAMwJ,aACFnK,YAAYqB,EAAQ+I,EAAmBL,GACnC1M,KAAK+M,kBAAoBA,EACzB/M,KAAK0M,cAAgBA,EACrB1I,EAAOgJ,IAAI,oBAAqB,IACrBhN,KAAKiN,SAIpBA,QACI,OAAOjN,KAAK+M,kBAAkBE,a,gBCgDtCzK,QAAQ7C,OAAO,sBACduN,UAAU,uBAAwB,CAtDnC,MAAMC,qBACFxK,cACI,MAAO,CACH2I,SAAS,EACT8B,SAAU,IACVC,OAAO,EACP7J,SAAU5D,EAAQ,GAClB0D,WAAY,uCAgDvBA,WAAW,kCAAmC,CAAC,SAAU,QA3C1D,MAAMgK,sBACF3K,YAAYqB,EAAQuJ,GAGhB,IADA,IAAIC,EAAYxJ,EACK,MAAbwJ,GAA8C,MAAvBA,EAAUA,WACrCA,EAAYA,EAAUC,QAG1B,GAAkB,MAAbD,EAAL,CAMA,IAAME,EAAa,GACfC,EAAeC,GAAU5F,MAAMC,KAAK2F,GAAQ9D,IAAK+D,GAChC,MAAhBA,EAAMD,OACHD,EAAaE,EAAMD,QAElBF,EAAWG,EAAMC,UAAYD,GAEtCF,EAAaH,EAAUA,UAAUI,QAGjC5J,EAAO+J,OAAO,eAAe,SAAS9L,EAAGhB,GAErC,IAAM+M,EAAWhK,EAAO6J,MAAMI,UAAUhM,GACxC,GAAgB,MAAZ+L,EACA,MAAO,MACH,IAAME,EAAS,GACf,IAAK,IAAIC,KAAKH,EAAU,CACpB,IAAMI,EAAIJ,EAASG,GACnBD,EAAOpF,KAAK4E,EAAWS,GAAG1M,MAAQ2M,GAEtC,OAAOF,GANJ,WAnBXtG,QAAQC,IAAI,gC,cC/BxBlI,EAAOD,QAAUkN,OAAOC,EAAE,iDAAmD,6O,gBCmB7ErK,QAAQ7C,OAAO,sBACduN,UAAU,qBAAsB,CAfjC,MAAMmB,mBACF1L,cACI,MAAO,CACH2I,SAAS,EACT8B,SAAU,IACVC,MAAO,CACHtG,OAAQ,IACRuH,QAAS,MAEb9K,SAAU5D,EAAQ,U,cCd9BD,EAAOD,QAAUkN,OAAOC,EAAE,+CAAiD","file":"scripts.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"angular-animate\"), require(\"@uirouter/angularjs\"), require(\"guanlecoja-ui\"), require(\"buildbot-data-js\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"yocto-console-view\", [\"angular-animate\", \"@uirouter/angularjs\", \"guanlecoja-ui\", \"buildbot-data-js\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"yocto-console-view\"] = factory(require(\"angular-animate\"), require(\"@uirouter/angularjs\"), require(\"guanlecoja-ui\"), require(\"buildbot-data-js\"));\n\telse\n\t\troot[\"yocto-console-view\"] = factory(root[\"angular-animate\"], root[\"@uirouter/angularjs\"], root[\"guanlecoja-ui\"], root[\"buildbot-data-js\"]);\n})((typeof self !== 'undefined' ? self : this), function(__WEBPACK_EXTERNAL_MODULE__1__, __WEBPACK_EXTERNAL_MODULE__2__, __WEBPACK_EXTERNAL_MODULE__3__, __WEBPACK_EXTERNAL_MODULE__4__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","/*\n * decaffeinate suggestions:\n * DS101: Remove unnecessary use of Array.from\n * DS102: Remove unnecessary code created because of implicit returns\n * DS205: Consider reworking code to avoid use of IIFEs\n * DS207: Consider shorter variations of null checks\n * Full docs: https://github.com/decaffeinate/decaffeinate/blob/master/docs/suggestions.md\n */\n\nimport 'angular-animate';\nimport '@uirouter/angularjs';\nimport 'guanlecoja-ui';\nimport 'buildbot-data-js';\n\nclass ConsoleState {\n    constructor($stateProvider, glMenuServiceProvider, bbSettingsServiceProvider) {\n\n        // Name of the state\n        const name = 'console';\n\n        // Menu configuration\n        glMenuServiceProvider.addGroup({\n            name,\n            caption: 'Yocto Console View',\n            icon: 'exclamation-circle',\n            order: 5\n        });\n\n        // Configuration\n        const cfg = {\n            group: name,\n            caption: 'Yocto Console View'\n        };\n\n        // Register new state\n        const state = {\n            controller: `${name}Controller`,\n            controllerAs: \"c\",\n            template: require('./console.tpl.jade'),\n            name,\n            url: `/${name}`,\n            data: cfg\n        };\n\n        $stateProvider.state(state);\n\n        bbSettingsServiceProvider.addSettingsGroup({\n            name: 'Console',\n            caption: 'Console related settings',\n            items: [{\n                type: 'integer',\n                name: 'buildLimit',\n                caption: 'Number of builds to fetch',\n                default_value: 200\n            }\n            , {\n                type: 'integer',\n                name: 'changeLimit',\n                caption: 'Number of changes to fetch',\n                default_value: 30\n            }\n            ]});\n    }\n}\n\nclass Console {\n    constructor($scope, $q, $window, dataService, bbSettingsService, resultsService,\n        $uibModal, $timeout) {\n        this.onChange = this.onChange.bind(this);\n        this._onChange = this._onChange.bind(this);\n        this.matchBuildWithChange = this.matchBuildWithChange.bind(this);\n        this.makeFakeChange = this.makeFakeChange.bind(this);\n        this.$scope = $scope;\n        this.$window = $window;\n        this.$uibModal = $uibModal;\n        this.$timeout = $timeout;\n        angular.extend(this, resultsService);\n        const settings = bbSettingsService.getSettingsGroup('Console');\n        this.buildLimit = settings.buildLimit.value;\n        this.changeLimit = settings.changeLimit.value;\n        this.dataAccessor = dataService.open().closeOnDestroy(this.$scope);\n        this._infoIsExpanded = {};\n        this.$scope.all_builders = (this.all_builders = this.dataAccessor.getBuilders());\n        this.$scope.builders = (this.builders = []);\n        if (typeof Intl !== 'undefined' && Intl !== null) {\n            const collator = new Intl.Collator(undefined, {numeric: true, sensitivity: 'base'});\n            this.strcompare = collator.compare;\n        } else {\n            this.strcompare = function(a, b) {\n                if (a < b) {\n                    return -1;\n                }\n                if (a === b) {\n                    return 0;\n                }\n                return 1;\n            };\n        }\n\n        this.$scope.revmapping = (this.revmapping = {});\n        this.$scope.branchmapping = (this.branchmapping = {});\n\n        this.$scope.builds = (this.builds = this.dataAccessor.getBuilds({\n            property: [\"yp_build_revision\", \"yp_build_branch\", \"reason\", \"publish_destination\"],\n            limit: this.buildLimit,\n            order: '-started_at'\n        }));\n        this.changes = this.dataAccessor.getChanges({limit: this.changeLimit, order: '-changeid'});\n        this.buildrequests = this.dataAccessor.getBuildrequests({limit: this.buildLimit, order: '-submitted_at'});\n        this.buildsets = this.dataAccessor.getBuildsets({limit: this.buildLimit, order: '-submitted_at'});\n\n        this.builds.onChange = this.onChange;\n        this.changes.onChange = this.onChange;\n        this.buildrequests.onChange = this.onChange;\n        this.buildsets.onChange = this.onChange;\n\n        this.builds.onNew = build => {\n            let change = false;\n            let {\n                buildid\n            } = build;\n            if ((build.properties != null ? build.properties.yp_build_revision : undefined) != null) {\n                this.revmapping[build.buildid] = build.properties.yp_build_revision[0];\n                change = true;\n            }\n            if ((build.properties != null ? build.properties.yp_build_branch : undefined) != null) {\n                this.branchmapping[build.buildid] = build.properties.yp_build_branch[0];\n                change = true;\n            }\n            if ((!this.revmapping[buildid] || !this.branchmapping[buildid]) && !build.complete_at) {\n                build.getProperties().onChange = properties => {\n                    change = false;\n                    buildid = properties.endpoint.split('/')[1];\n                    if (!this.revmapping[buildid]) {\n                        const rev = this.getBuildProperty(properties[0], 'yp_build_revision');\n                        if (rev != null) {\n                            this.revmapping[buildid] = rev;\n                            change = true;\n                        }\n                    }\n                    if (!this.branchmapping[buildid]) {\n                        const branch = this.getBuildProperty(properties[0], 'yp_build_branch');\n                        if (branch != null) {\n                            this.branchmapping[buildid] = branch;\n                            change = true;\n                        }\n                    }\n                    if (change && (this.onchange_debounce == null)) {\n                        console.log(\"onNew change props\");\n                        this.onchange_debounce = this.$timeout(this._onChange, 100);\n                    }\n                };\n            }\n            if (change && (this.onchange_debounce == null)) {\n                console.log(\"onNew change\");\n                this.onchange_debounce = this.$timeout(this._onChange, 100);\n            }\n        };\n    }\n\n    getBuildProperty(properties, property) {\n        const hasProperty = properties && properties.hasOwnProperty(property);\n        if (hasProperty) { return properties[property][0]; } else { return null; }\n    }\n\n    onChange(s) {\n        // if there is no data, no need to try and build something.\n        if ((this.builds.length === 0) || (this.all_builders.length === 0) || !this.changes.$resolved ||\n                (this.buildsets.length === 0) || (this.buildrequests === 0)) {\n            return;\n        }\n        if ((this.onchange_debounce == null)) {\n            this.onchange_debounce = this.$timeout(this._onChange, 100);\n        }\n    }\n\n    _onChange() {\n        console.log(\"onChange called\");\n        let build, change;\n        this.onchange_debounce = undefined;\n        // we only display builders who actually have builds\n        for (build of Array.from(this.builds)) {\n            this.all_builders.get(build.builderid).hasBuild = true;\n        }\n\n        this.sortBuildersByTags(this.all_builders);\n\n        this.changesBySSID = {};\n        this.changesByRevision = {};\n        for (change of Array.from(this.changes)) {\n            this.changesBySSID[change.sourcestamp.ssid] = change;\n            this.changesByRevision[change.revision] = change;\n            this.populateChange(change);\n        }\n\n\n        for (build of Array.from(this.builds)) {\n            this.matchBuildWithChange(build);\n        }\n\n        this.filtered_changes = [];\n\n        for (let ssid in this.changesBySSID) {\n            change = this.changesBySSID[ssid];\n            if (change.comments) {\n                change.subject = change.comments.split(\"\\n\")[0];\n            }\n            for (let builder of Array.from(change.builders)) {\n                if (builder.builds.length > 0) {\n                    this.filtered_changes.push(change);\n                    break;\n                }\n            }\n        }\n    }\n    /*\n     * Sort builders by tags\n     * Buildbot eight has the category option, but it was only limited to one category per builder,\n     * which make it easy to sort by category\n     * Here, we have multiple tags per builder, we need to try to group builders with same tags together\n     * The algorithm is rather twisted. It is a first try at the concept of grouping builders by tags..\n     */\n\n    sortBuildersByTags(all_builders) {\n        // first we only want builders with builds\n        let tag;\n        const builders_with_builds = [];\n        let builderids_with_builds = \"\";\n        for (let builder of Array.from(all_builders)) {\n            if (builder.hasBuild) {\n                builders_with_builds.push(builder);\n                builderids_with_builds += `.${builder.builderid}`;\n            }\n        }\n\n        if (builderids_with_builds === this.last_builderids_with_builds) {\n            // don't recalculate if it hasn't changed!\n            return;\n        }\n        // we call recursive function, which finds non-overlapping groups\n        let tag_line = this._sortBuildersByTags(builders_with_builds);\n        // we get a tree of builders grouped by tags\n        // we now need to flatten the tree, in order to build several lines of tags\n        // (each line is representing a depth in the tag tree)\n        // we walk the tree left to right and build the list of builders in the tree order, and the tag_lines\n        // in the tree, there are groups of remaining builders, which could not be grouped together,\n        // those have the empty tag ''\n        const tag_lines = [];\n\n        let sorted_builders = [];\n        const set_tag_line = function(depth, tag, colspan) {\n            // we build the tag lines by using a sparse array\n            let _tag_line = tag_lines[depth];\n            if ((_tag_line == null)) {\n                // initialize the sparse array\n                _tag_line = (tag_lines[depth] = []);\n            } else {\n                // if we were already initialized, look at the last tag if this is the same\n                // we merge the two entries\n                const last_tag = _tag_line[_tag_line.length - 1];\n                if (last_tag.tag === tag) {\n                    last_tag.colspan += colspan;\n                    return;\n                }\n            }\n            return _tag_line.push({tag, colspan});\n        };\n        const self = this;\n        // recursive tree walking\n        var walk_tree = function(tag, depth) {\n            set_tag_line(depth, tag.tag, tag.builders.length);\n            if ((tag.tag_line == null) || (tag.tag_line.length === 0)) {\n                // this is the leaf of the tree, sort by buildername, and add them to the\n                // list of sorted builders\n                tag.builders.sort((a, b) => self.strcompare(a.name, b.name));\n                sorted_builders = sorted_builders.concat(tag.builders);\n                for (let i = 1; i <= 100; i++) {  // set the remaining depth of the tree to the same colspan\n                                   // (we hardcode the maximum depth for now :/ )\n                    set_tag_line(depth + i, '', tag.builders.length);\n                }\n                return;\n            }\n            return Array.from(tag.tag_line).map((_tag) =>\n                walk_tree(_tag, depth + 1));\n        };\n\n        for (tag of Array.from(tag_line)) {\n            walk_tree(tag, 0);\n        }\n\n        this.builders = sorted_builders;\n        this.tag_lines = [];\n        // make a new array to avoid it to be sparse, and to remove lines filled with null tags\n        for (tag_line of Array.from(tag_lines)) {\n            if (!((tag_line.length === 1) && (tag_line[0].tag === \"\"))) {\n                this.tag_lines.push(tag_line);\n            }\n        }\n        return this.last_builderids_with_builds = builderids_with_builds;\n    }\n    /*\n     * recursive function which sorts the builders by tags\n     * call recursively with groups of builders smaller and smaller\n     */\n    _sortBuildersByTags(all_builders) {\n\n        // first find out how many builders there is by tags in that group\n        let builder, builders, tag;\n        const builders_by_tags = {};\n        for (builder of Array.from(all_builders)) {\n            if (builder.tags != null) {\n                for (tag of Array.from(builder.tags)) {\n                    if ((builders_by_tags[tag] == null)) {\n                        builders_by_tags[tag] = [];\n                    }\n                    builders_by_tags[tag].push(builder);\n                }\n            }\n        }\n        const tags = [];\n        for (tag in builders_by_tags) {\n            // we don't want the tags that are on all the builders\n            builders = builders_by_tags[tag];\n            if (builders.length < all_builders.length) {\n                tags.push({tag, builders});\n            }\n        }\n\n        // sort the tags to first look at tags with the larger number of builders\n        // @FIXME maybe this is not the best method to find the best groups\n        tags.sort((a, b) => b.builders.length - a.builders.length);\n\n        const tag_line = [];\n        const chosen_builderids = {};\n        // pick the tags one by one, by making sure we make non-overalaping groups\n        for (tag of Array.from(tags)) {\n            let excluded = false;\n            for (builder of Array.from(tag.builders)) {\n                if (chosen_builderids.hasOwnProperty(builder.builderid)) {\n                    excluded = true;\n                    break;\n                }\n            }\n            if (!excluded) {\n                for (builder of Array.from(tag.builders)) {\n                    chosen_builderids[builder.builderid] = tag.tag;\n                }\n                tag_line.push(tag);\n            }\n        }\n\n        // some builders do not have tags, we put them in another group\n        const remaining_builders = [];\n        for (builder of Array.from(all_builders)) {\n            if (!chosen_builderids.hasOwnProperty(builder.builderid)) {\n                remaining_builders.push(builder);\n            }\n        }\n\n        if (remaining_builders.length) {\n            tag_line.push({tag: \"\", builders: remaining_builders});\n        }\n\n        // if there is more than one tag in this line, we need to recurse\n        if (tag_line.length > 1) {\n            for (tag of Array.from(tag_line)) {\n                tag.tag_line = this._sortBuildersByTags(tag.builders);\n            }\n        }\n        return tag_line;\n    }\n\n    /*\n     * fill a change with a list of builders\n     */\n    populateChange(change) {\n        change.builders = [];\n        change.buildersById = {};\n        for (let builder of Array.from(this.builders)) {\n            builder = {builderid: builder.builderid, name: builder.name, builds: []};\n            change.builders.push(builder);\n            change.buildersById[builder.builderid] = builder;\n        }\n    }\n    /*\n     * Match builds with a change\n     */\n    matchBuildWithChange(build) {\n        let change, oldrev, rev;\n        const buildrequest = this.buildrequests.get(build.buildrequestid);\n        if ((buildrequest == null)) {\n            return;\n        }\n        const buildset = this.buildsets.get(buildrequest.buildsetid);\n        if ((buildset == null)) {\n            return;\n        }\n        if  ((buildset != null) && (buildset.sourcestamps != null)) {\n            for (let sourcestamp of Array.from(buildset.sourcestamps)) {\n                change = this.changesBySSID[sourcestamp.ssid];\n                if (change != null) {\n                    break;\n                }\n            }\n        }\n\n        if (((build.properties != null ? build.properties.yp_build_revision : undefined) != null) || this.revmapping[build.buildid]) {\n            if ((build.properties != null ? build.properties.yp_build_revision : undefined) != null) {\n                rev = build.properties.yp_build_revision[0];\n            } else {\n                rev = this.revmapping[build.buildid];\n            }\n            change = this.changesByRevision[rev];\n            if ((change == null)) {\n                change = this.changesBySSID[rev];\n            }\n            if ((change == null)) {\n                change = this.makeFakeChange(rev, build.started_at, rev);\n            }\n\n            change.caption = \"Commit\";\n            if ((build.properties != null ? build.properties.yp_build_branch : undefined) != null) {\n                change.caption = build.properties.yp_build_branch[0];\n            }\n            if (this.branchmapping[build.buildid]) {\n                change.caption = this.branchmapping[build.buildid];\n            }\n            change.revlink = \"http://git.yoctoproject.org/cgit.cgi/poky/commit/?id=\" + rev;\n            change.errorlink = \"http://errors.yoctoproject.org/Errors/Latest/?filter=\" + rev + \"&type=commit&limit=150\";\n            let bid = build.buildid;\n            if ((buildset != null) && (buildset.parent_buildid != null)) {\n                bid = buildset.parent_buildid;\n            }\n            if (((change.bid != null) && (bid > change.bid)) || (change.bid == null)) {\n                change.bid = bid;\n                change.loglink = \"https://wiki.yoctoproject.org/wiki/BuildLog#\" + bid;\n            }\n            if ((build.properties != null ? build.properties.reason : undefined) != null) {\n                change.reason = build.properties.reason[0];\n            }\n            if ((build.properties != null ? build.properties.publish_destination : undefined) != null) {\n                change.publishurl = build.properties.publish_destination[0].replace(\"/srv/autobuilder/autobuilder.yoctoproject.org/\", \"https://autobuilder.yocto.io/\");\n            }\n        } else {\n            rev = `Unresolved Revision`;\n            if ((change == null)) {\n                change = this.changesBySSID[rev];\n            }\n            if ((change == null)) {\n                change = this.makeFakeChange(rev, build.started_at, rev);\n                change.caption = rev;\n            }\n        }\n\n        if (change.buildersById[build.builderid].builds.indexOf(build) == -1) {\n            change.buildersById[build.builderid].builds.push(build);\n        }\n    }\n\n    makeFakeChange(revision, when_timestamp, comments) {\n        const change = {\n            revision,\n            changeid: revision,\n            when_timestamp,\n            comments\n        };\n        this.changesBySSID[revision] = change;\n        this.populateChange(change);\n        return change;\n    }\n    /*\n     * Open all change row information\n     */\n    openAll() {\n        return Array.from(this.filtered_changes).map((change) =>\n            (change.show_details = true));\n    }\n\n    /*\n     * Close all change row information\n     */\n    closeAll() {\n        return Array.from(this.filtered_changes).map((change) =>\n            (change.show_details = false));\n    }\n\n    /*\n     * Calculate row header (aka first column) width\n     * depending if we display commit comment, we reserve more space\n     */\n    getRowHeaderWidth() {\n        if (this.hasExpanded()) {\n            return 400;  // magic value enough to hold 78 characters lines\n        } else {\n            return 200;\n        }\n    }\n    /*\n     * Calculate col header (aka first row) height\n     * It depends on the length of the longest builder\n     */\n    getColHeaderHeight() {\n        let max_buildername = 0;\n        for (let builder of Array.from(this.builders)) {\n            max_buildername = Math.max(builder.name.length, max_buildername);\n        }\n        return Math.max(100, max_buildername * 3);\n    }\n\n    /*\n     *\n     * Determine if we use a 100% width table or if we allow horizontal scrollbar\n     * depending on number of builders, and size of window, we need a fixed column size or a 100% width table\n     *\n     */\n    isBigTable() {\n        const padding = this.getRowHeaderWidth();\n        if (((this.$window.innerWidth - padding) / this.builders.length) < 40) {\n            return true;\n        }\n        return false;\n    }\n    /*\n     *\n     * do we have at least one change expanded?\n     *\n     */\n    hasExpanded() {\n        for (let change of Array.from(this.changes)) {\n            if (this.infoIsExpanded(change)) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /*\n     *\n     * display build details\n     *\n     */\n    selectBuild(build) {\n        let modal;\n        return modal = this.$uibModal.open({\n            template: require('./view/modal/modal.tpl.jade'),\n            controller: 'consoleModalController as modal',\n            windowClass: 'modal-big',\n            resolve: {\n                selectedBuild() { return build; }\n            }\n        });\n    }\n\n    /*\n     *\n     * toggle display of additional info for that change\n     *\n     */\n    toggleInfo(change) {\n        return change.show_details = !change.show_details;\n    }\n    infoIsExpanded(change) {\n        return change.show_details;\n    }\n}\n\n\nangular.module('yocto_console_view', [\n    'ui.router', 'ui.bootstrap', 'ngAnimate', 'guanlecoja.ui', 'bbData'])\n.config(['$stateProvider', 'glMenuServiceProvider', 'bbSettingsServiceProvider', ConsoleState])\n.controller('consoleController', ['$scope', '$q', '$window', 'dataService', 'bbSettingsService', 'resultsService', '$uibModal', '$timeout', Console]);\n\nrequire('./view/modal/modal.controller.js');\nrequire('./releaseselectorfield.directive.js');\nrequire('./yoctochangedetails.directive.js');\n","module.exports = __WEBPACK_EXTERNAL_MODULE__1__;","module.exports = __WEBPACK_EXTERNAL_MODULE__2__;","module.exports = __WEBPACK_EXTERNAL_MODULE__3__;","module.exports = __WEBPACK_EXTERNAL_MODULE__4__;","module.exports = window.T['console_view/views/console.html'] || \"<div class=\\\"console no-select\\\"><div class=\\\"load-indicator\\\" ng-hide=\\\"c.builds.$resolved &amp;&amp; c.changes.$resolved &amp;&amp; c.buildrequests.$resolved &amp;&amp; c.buildsets.$resolved\\\"><div class=\\\"spinner\\\"><i class=\\\"fa fa-circle-o-notch fa-spin fa-2x\\\"></i><p>loading</p></div></div><div ng-show=\\\"c.changes.$resolved &amp;&amp; c.filtered_changes.length==0\\\"><p>No changes. Console view needs changesource to be setup, and<a href=\\\"#changes\\\">changes</a>to be in the system.</p></div><table class=\\\"table table-striped table-bordered\\\" ng-hide=\\\"c.filtered_changes.length==0\\\" ng-class=\\\"{'table-fixedwidth': c.isBigTable()}\\\"><tr class=\\\"first-row\\\"><th class=\\\"row-header\\\" ng-style=\\\"{'width': c.getRowHeaderWidth()}\\\"><i class=\\\"fa fa-plus-circle pull-left\\\" ng-click=\\\"c.openAll()\\\" uib-tooltip=\\\"Open information for all changes\\\" uib-tooltip-placement=\\\"right\\\"></i><i class=\\\"fa fa-minus-circle pull-left\\\" ng-click=\\\"c.closeAll()\\\" uib-tooltip=\\\"Close information for all changes\\\" uib-tooltip-placement=\\\"right\\\"></i></th><th class=\\\"column\\\" ng-repeat=\\\"builder in c.builders\\\"><span class=\\\"builder\\\" ng-style=\\\"{'margin-top': c.getColHeaderHeight()}\\\"><a ng-href=\\\"#/builders/{{ builder.builderid }}\\\" ng-bind=\\\"builder.name\\\"></a></span></th></tr><tr class=\\\"tag_row\\\" ng-repeat=\\\"tag_line in c.tag_lines\\\"><td class=\\\"row-header\\\"></td><td ng-repeat=\\\"tag in tag_line\\\" colspan=\\\"{{tag.colspan}}\\\"><span uib-tooltip=\\\"{{ tag.tag }}\\\" ng-style=\\\"{width: tag.colspan*50}\\\">{{tag.tag}}</span></td></tr><tr ng-repeat=\\\"change in c.filtered_changes | orderBy: ['-when_timestamp'] track by change.changeid\\\"><td><yoctochangedetails change=\\\"change\\\"></yoctochangedetails></td><td class=\\\"column\\\" ng-repeat=\\\"builder in change.builders\\\" title=\\\"{{builder.name}}\\\"><a ng-repeat=\\\"build in builder.builds | orderBy: ['number']\\\"><span class=\\\"badge-status\\\" ng-if=\\\"build.buildid\\\" ng-class=\\\"c.results2class(build, 'pulse')\\\" ng-click=\\\"c.selectBuild(build)\\\">{{ build.number }}</span></a></td></tr></table></div>\";","module.exports = window.T['console_view/views/modal.html'] || \"<!-- Show build summary for the selected build in a modal window--><div class=\\\"modal-header\\\"><i class=\\\"fa fa-times pull-right\\\" ng-click=\\\"modal.close()\\\"></i><h4 class=\\\"modal-title\\\">Build summary</h4></div><div class=\\\"modal-body\\\"><buildsummary ng-if=\\\"modal.selectedBuild\\\" buildid=\\\"modal.selectedBuild.buildid\\\"></buildsummary></div>\";","/*\n * decaffeinate suggestions:\n * DS102: Remove unnecessary code created because of implicit returns\n * Full docs: https://github.com/decaffeinate/decaffeinate/blob/master/docs/suggestions.md\n */\nclass ConsoleModal {\n    constructor($scope, $uibModalInstance, selectedBuild) {\n        this.$uibModalInstance = $uibModalInstance;\n        this.selectedBuild = selectedBuild;\n        $scope.$on('$stateChangeStart', () => {\n            return this.close();\n        });\n    }\n\n    close() {\n        return this.$uibModalInstance.close();\n    }\n}\n\n\nangular.module('yocto_console_view')\n.controller('consoleModalController', ['$scope', '$uibModalInstance', 'selectedBuild', ConsoleModal]);\n","/*\n * decaffeinate suggestions:\n * DS002: Fix invalid constructor\n * DS101: Remove unnecessary use of Array.from\n * DS102: Remove unnecessary code created because of implicit returns\n * DS205: Consider reworking code to avoid use of IIFEs\n * DS207: Consider shorter variations of null checks\n * Full docs: https://github.com/decaffeinate/decaffeinate/blob/master/docs/suggestions.md\n */\n\nclass Releaseselectorfield {\n    constructor() {\n        return {\n            replace: false,\n            restrict: 'E',\n            scope: false,\n            template: require('./releaseselectorfield.tpl.jade'),\n            controller: '_ReleaseselectorfieldController'\n        };\n    }\n}\n\nclass _releaseselectorfield {\n    constructor($scope, $http) {\n        // HACK: we find the rootfield by doing $scope.$parent.$parent\n        let rootfield = $scope;\n        while ((rootfield != null) && (rootfield.rootfield == null)) {\n            rootfield = rootfield.$parent;\n        }\n\n        if ((rootfield == null)) {\n            console.log(\"rootfield not found!?!?\");\n            return;\n        }\n\n        // copy paste of code in forcedialog, which flatten the fields to be able to find easily\n        const fields_ref = {};\n        var gatherFields = fields => Array.from(fields).map((field) =>\n            (field.fields != null) ?\n                gatherFields(field.fields)\n            :\n                (fields_ref[field.fullName] = field));\n\n        gatherFields(rootfield.rootfield.fields);\n\n        // when our field change, we update the fields that we are suppose to\n        $scope.$watch(\"field.value\", function(n, o) {\n\n            const selector = $scope.field.selectors[n];\n            if (selector != null) {\n                return (() => {\n                    const result = [];\n                    for (let k in selector) {\n                        const v = selector[k];\n                        result.push(fields_ref[k].value = v);\n                    }\n                    return result;\n                })();\n            }\n        });\n    }\n}\n\nangular.module('yocto_console_view')\n.directive('releaseselectorfield', [Releaseselectorfield])\n.controller('_ReleaseselectorfieldController', ['$scope', '$http', _releaseselectorfield])\n","module.exports = window.T['console_view/views/releaseselectorfield.html'] || \"<basefield><label class=\\\"control-label col-sm-2\\\" for=\\\"{{field.name}}\\\">{{field.label}}</label><div class=\\\"col-sm-10\\\"><select class=\\\"form-control\\\" ng-model=\\\"field.value\\\" ng-options=\\\"v for v in field.choices\\\"></select></div></basefield>\";","/*\n * decaffeinate suggestions:\n * DS002: Fix invalid constructor\n * Full docs: https://github.com/decaffeinate/decaffeinate/blob/master/docs/suggestions.md\n */\nclass Yoctochangedetails {\n    constructor() {\n        return {\n            replace: true,\n            restrict: 'E',\n            scope: {\n                change: '=',\n                compact: '=?'\n            },\n            template: require('./yoctochangedetails.tpl.jade')\n        };\n    }\n}\n\nangular.module('yocto_console_view')\n.directive('yoctochangedetails', [Yoctochangedetails])\n","module.exports = window.T['console_view/views/yoctochangedetails.html'] || \"<div class=\\\"yoctochangedetails\\\" style=\\\"width:100%;\\\"><div style=\\\"width:100%;\\\" ng-click=\\\"change.show_details = !change.show_details\\\"><a ng-if=\\\"change.revlink\\\" ng-href=\\\"{{change.revlink}}\\\" uib-tooltip=\\\"{{change.comments}}\\\">{{ change.caption }} &nbsp;</a><a ng-if=\\\"change.errorlink\\\" ng-href=\\\"{{change.errorlink}}\\\">{{ \\\"Errors\\\" }} &nbsp;</a><a ng-if=\\\"change.loglink\\\" ng-href=\\\"{{change.loglink}}\\\">{{ \\\"WikiLog\\\" }} &nbsp;</a><a ng-if=\\\"change.publishurl\\\" ng-href=\\\"{{change.publishurl}}\\\">{{ \\\"Output\\\" }} &nbsp;</a><span ng-if=\\\"!change.revlink\\\" uib-tooltip=\\\"{{change.comments}}\\\">{{ change.caption }} &nbsp;</span><span ng-if=\\\"!compact\\\" uib-tooltip=\\\"{{change.when_timestamp | dateformat:'LLL'}}\\\">({{ change.when_timestamp | timeago }}) &nbsp;</span><i class=\\\"fa fa-chevron-circle-right rotate clickable\\\" ng-class=\\\"{'fa-rotate-90':change.show_details}\\\"></i></div><div class=\\\"anim-changedetails\\\" ng-show=\\\"change.show_details\\\"><table class=\\\"table table-striped table-condensed\\\" ng-show=\\\"change.show_details\\\"><tr ng-show=\\\"change.reason\\\"><td>Reason</td><td>{{ change.reason }}</td></tr><tr ng-show=\\\"change.author\\\"><td>Author</td><td>{{ change.author }}</td></tr><tr><td>Date</td><td>{{ change.when_timestamp | dateformat:'LLL'}} ({{ change.when_timestamp | timeago }})</td></tr><tr ng-show=\\\"change.repository\\\"><td>Repository</td><td>{{ change.repository }}</td></tr><tr ng-show=\\\"change.branch\\\"><td>Branch</td><td>{{ change.branch }}</td></tr><tr><td>Revision</td><td> <a ng-if=\\\"change.revlink\\\" ng-href=\\\"{{change.revlink}}\\\"> {{ change.revision }}</a></td></tr></table><h5>Comment</h5><pre>{{ change.comments }}</pre><h5>Changed files</h5><ul><li ng-repeat=\\\"file in change.files\\\">{{file}}</li></ul><p ng-hide=\\\"change.files.length\\\">No files</p></div></div>\";"],"sourceRoot":""}